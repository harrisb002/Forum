// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Trainer {
  // Creates the PK
  id          Int           @id @default(autoincrement()) @map("trainer_id") // Can column-level change names
  email       String        @unique
  username    String        @unique
  name        String
  verified    Boolean       @default(false)
  pokemon     Pokemon[] // This does not effect database, this is for the client code
  trainerType TrainerType[]

  // Or change in the table-level
  @@map("trainer") // Totally optional for renaming
}

enum TrainerType {
  ACE_TRAINER
  BUG_CATCHER
  DRAGON_TAMER
  FISHERMAN
}

model Pokemon {
  id        Int      @id @default(autoincrement()) @map("post_id")
  title     String
  body      String
  owned     Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") // @updatedAt is on the Prisma level, not DB level
  trainerId Int      @map("trainer_id") // This is actually stored in the database (? after type can be used to signify its not required)

  // This describes the relationship to trainer to reference as the FK
  owner Trainer        @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  moves PokemonMoves[]

  @@map("pokemon")
}

// Creating a many-many relationship to Pokemon to allow moves to be applied to them
// Thus a move can be used by many pokemon and a pokemon can have many moves
model Move {
  id    Int            @id @default(autoincrement()) @map("move_id")
  name  String
  moves PokemonMoves[]

  @@map("moves")
}

// Creating Intermediate table to associate Pokemon with Moves
model PokemonMoves {
  id        Int      @id @default(autoincrement()) @map("pokemon_move_id")
  pokemonId Int      @map("pokemon_id")
  moveId    Int      @map("move_id")
  addedAt   DateTime @default(now()) @map("added_at")
  // These properties will allow access to the associated data in the code
  // They dont actually get added to the DB tables, they just allow for the relationship
  pokemon   Pokemon  @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  move      Move     @relation(fields: [moveId], references: [id], onDelete: Cascade)

  @@unique([pokemonId, moveId]) // Adds unique constraint to surrogate key
  @@map("pokemon_moves")
}

// model TrainerType {
//   id        Int     @id @default(autoincrement()) @map("notification_settings_id")
//   AceTrainer  Boolean @default(true)
//   BugCatcher Boolean @default(false)
//   DragonTamer     Boolean @default(false)
//   trainer   Trainer @relation(fields: [trainerId], references: [id])
//   trainerId Int     @unique @map("trainer_id")

//   @@map("notification_settings")
// }
